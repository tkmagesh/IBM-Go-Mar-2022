Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea break   : 11:00 AM (20 mins)
    Lunch break : 1:00 PM (1 hr)
    Tea break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodolgy:
    No powerpoints
    100% hands on driven
    At least 50% of the participants should have completed the assignments for us to proceed

About You:
    Name
    Experience
    Primary skillset
    Experience in Go (if any)
    Any interesting books / shows you read / watched in the recent times


Why Go?

    1. Concurrency
    2. Easy to adopt language
    3. More lightweight (adaptable for Cloud / distributed applications)
    4. Good documentation
    5. Smaller memory footprint

    1. Simplicity
        ONLY 25 keywords
        No access modifiers
        No class (only structs)
        No inheritance (only composition)
        No exceptions (only errors & panics)
        No pointer arithmetic
        No "reference" types
        No implicit type conversions

    2. Cloud Friendly
        Compile to native code
        Performance is equivalent to c++

    3. Concurrency
        (The ability to have more than one "execution path" in the application)
        Every goroutine takes only 4 KB of memory
        Can execute 1000s of goroutine using 1 OS thread
        Go language is built for Concurrency
        Language constructs for Concurrency
            go, select, range, close, channel (data type), <- (channel operator)
            APIs - sync package

Software requirements
    1. Go tools 
    2. Visual Studio Code (https://code.visualstudio.com)
    
Golang documentation
    https://pkg.go.dev/std


Creating builds for different environments (https://go.dev/doc/install/source#environment)
    GOOS=windows GOARCH=amd64 go build hello-world.go

Creating a build in a different name
    go build -o hw hello-world.go

Curated list of libraries & frameworks
    https://github.com/avelino/awesome-go

Data Types in Go
    string
    bool

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] + imaginary [float32])
    complex128 (real [float64] + imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32) (Unicode code point)

Assignment:01
    Write a program that will print all the prime numbers between 3 to 100

Assignment:02
    Display the following menu 
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit
    If the user choice is 1 - 4, 
        accept 2 numbers 
        perform the respective operation
        print the result
        display the menu again
    if the user choice is 5
        exit from the application
    If the user enters any other choice 
        display "Invalid choice" 
        display the menu again.

Functions
    - Variadic functions
    - anonymous functions
    - higher order functions
        functions can be treated as values
        * assign functions as values to variables
        * pass functions as arguments to other functions
        * return functions as return values from other functions

Assignment:03:
    Refactor the Assignment:02 solution using functions

Collections
    - Arrays
        fixed size collection of data of the same type
    - Slices
        varying size collection of data of the same type
            len - # of values from the underlying array that are accessible through the slice
            capacity - memory allocation
    - Maps
        collection of key/value pairs
        
Assignment:04
    Create a function "generatePrimes" that will return a collection of prime numbers between 'start' to 'end'


Modularity

    environment variables
        go env
        go env GOPATH

            GOROOT => Go installation directory
            GOBIN => Binaries of go tools 
            GOOS => default OS while creating the build
            GOARCH => default Architecture while creating the build

    Before Go 1.13
        GOPATH
            bin
            pkg
            src
                github.com
                    tkmagesh77
                        my-app
                            main.go
                                import github.com/tkmagesh77/my-app/pkg-1

                            pkg-1
                                pkg1.go
                                pkg1.test.go
                            pkg-2
                                pkg2.go
                                pkg2.test.go

    In Go 1.13 go modules were introduced
        go.mod 
            name of the module
            go runtime version
            dependencies

        go mod init <module_name>

        packages
            just folders

    When a module file exists
        go run .
        go build .

    to install a 3rd party package
        go get <package_path>

    to update th go.mod file based on the usage of dependent packages
        go mod tidy

    to localize the dependencies
        go mod vendor

    to replace a dependency path
        go mod edit -replace dep-helpers=/Users/tkmagesh77/Documents/Training/IBM-Go-Mar-2022/dep-module
        reference : https://thewebivore.com/using-replace-in-go-mod-to-point-to-your-local-module/
        
    Reference:
        https://go.dev/ref/mod


structs

Assignment:6
    Create a Product struct with the following fields
        Id, Name, Cost, Units, Category

    Create a "Format" function that will print the product details in the following format
       Id = <id>, Name = <name>, Cost = <cost>, Units = <units>, Category = <category>

    Create a "ApplyDiscount" function using which one can update the product cost after applying the discount
        

Assignment:7

    products := []Product{
		Product{105, "Pen", 5, 50, "Stationary"},
		Product{107, "Pencil", 2, 100, "Stationary"},
		Product{103, "Marker", 50, 20, "Utencil"},
		Product{102, "Stove", 5000, 5, "Utencil"},
		Product{101, "Kettle", 2500, 10, "Utencil"},
		Product{104, "Scribble Pad", 20, 20, "Stationary"},
	}

    Write the following functions

    IndexOf => return the index of the "given product" in the collection (return -1 if the given product is not in the given collection)

    Includes => return true if the given product is present in the collection else return false
    
    Filter => return products that matches the given criteria
        Use cases:
            1. filter all costly products (cost > 1000)
            2. filter all stationary products (category == stationary)
            3. filter all costly stationary products

            
    All => return true if ALL the products matches the given criteria else return false
        Use cases:
            1. Are all the products costly products (cost > 1000) ?
            2. Are all the products stationary products? (category == "Stationary")

    Any => return true if ANY of the products matches the given criteria else returns false
        Use cases:
            1. Are there ANY costly product (cost > 1000) ?
            2. Are there ANY stationary products? (category == "Stationary")
